/**
 * Created by lupn on 2017/12/20.  前端工具类库
 */

/*========================指令集========================*/

/* 常用的校验指令(失去焦点验证)
 * @author:pink_bin
   tips ==>
   key:校验名称
   value.reg:校验的正则表达式
   value.txt:提示信息
 * */
Vue.directive('validate', {
	bind(el, binding, vnode) {

		/* 每个验证指令在绑定之后给上下文对象的validation对象添加属性，为了整体校验
		      如果req参数存在的话，则是必须校验，否则校验不是必须的	
		 * */
		vnode.context.$set(vnode.context._data.validation, binding.arg, binding.modifiers.req ? false : true);

		/*如果是密码的话，需要给上下文的validation对象添加_password属性保存密码值，
		为了确认密码的时候进行校验 */
		if(binding.value === 'password') {
			el.addEventListener('blur', function() {
				vnode.context.$set(vnode.context._data.validation, '_password', el.value);
			})
		}

		/* 验证的主体逻辑 */
		var tips = {
			//手机号
			'phone': {
				reg: /^1[3|4|5|7|8]\d{9}$/,
				txt: '请输入正确的手机号'
			},
			//密码
			'password': {
				reg: /^[a-zA-Z0-9_-]{8,16}$/,
				txt: '请输入正确的密码'
			},
			//确认密码
			'confirmPassword': 'confirmPassword',
			//手机验证码
			'smsCode': {
				reg: /^\d{4}$/,
				txt: '请输入正确的验证码'
			}

		}[binding.value] || {
			reg: /\S+/,
			txt: '不能为空'
		}

		el.addEventListener('blur', function() {
			//确认密码的逻辑
			if(tips === 'confirmPassword' && el.value !== vnode.context._data.validation._password) {
				vnode.context._data.validation[binding.arg] = false;
				mui.toast('两次输入的密码不一致');
			} else if(tips === 'confirmPassword' && el.value === vnode.context._data.validation._password) {
				vnode.context._data.validation[binding.arg] = true;
				
			//主要逻辑
			} else if(!tips.reg.test(el.value)) {
				vnode.context._data.validation[binding.arg] = false;
				mui.toast(tips.txt);
			} else if(!tips.reg.test(el.value) && !binding.modifiers.req && el.value !== '') {
				vnode.context._data.validation[binding.arg] = true;
			} else if(tips.reg.test(el.value)) {
				vnode.context._data.validation[binding.arg] = true;
			}
		})
	}
})

/*========================mixins========================*/

/* 表单验证通过的按钮必须引入此项 ,此处作为一个示例来引用
 * author:pink_bin
 * */
var isCompleted = {
	computed: {
		isCompleted() {
			var flag = true;
			for(var i in this.$root.validation) {
				if(!this.$root.validation[i]) {
					flag = false;
				}
			}
			return flag;
		}
	}
}

/*========================普通功能函数========================*/

/* 控制返回键退出应用  */
function backControl() {
	mui.plusReady(function() {
		var backButtonPress = 0;
		mui.back = function(event) {
			backButtonPress++;
			if(backButtonPress > 1) {
				plus.runtime.quit();
			} else {
				plus.nativeUI.toast('再按一次退出应用');
			}
			setTimeout(function() {
				backButtonPress = 0;
			}, 1000);
			return false;
		};
	})
}

/* 选择时间 */
function chooseTime(obj) {
	obj = obj || {};
	obj.min_date = obj.min_date || '1900-01-01';
	obj.max_date = obj.max_date || '';
	obj.fmt = obj.fmt || 'yyyy-MM-dd';
	if(!obj.time) {
		obj.time = false;
	} else {
		obj.fmt = 'yyyy-MM-dd hh:mm';
	}

	var dDate = new Date(); //当前日期
	var minDate = new Date(obj.min_date);
	var maxDate = new Date(obj.max_date);
	var choosedDate;
	mui.plusReady(function() {
		plus.nativeUI.pickDate(function(e) {
			var d = e.date;
			var year = d.getFullYear();
			var month = d.getMonth() + 1;
			var day = d.getDate();
			if(typeof(obj.confirmFun) == 'function') {
				if(obj.time) {
					plus.nativeUI.pickTime(function(e) {
						var t = e.date;
						var o = {
							"M+": month,
							"d+": day,
							"h+": t.getHours(),
							"m+": t.getMinutes(),
							"s+": t.getSeconds(),
							"q+": Math.floor((t.getMonth() + 3) / 3),
							"S": t.getMilliseconds()
						};
						if(/(y+)/.test(obj.fmt)) obj.fmt = obj.fmt.replace(RegExp.$1, (year + "").substr(4 - RegExp.$1.length));
						for(var k in o)
							if(new RegExp("(" + k + ")").test(obj.fmt)) obj.fmt = obj.fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
						obj.confirmFun(obj.fmt);
					}, function(e) {

					}, {
						title: "请选择时间",
						is24Hour: true,
						time: dDate
					})
				} else {
					var o = {
						"M+": month,
						"d+": day
					};
					if(/(y+)/.test(obj.fmt)) obj.fmt = obj.fmt.replace(RegExp.$1, (year + "").substr(4 - RegExp.$1.length));
					for(var k in o)
						if(new RegExp("(" + k + ")").test(obj.fmt)) obj.fmt = obj.fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
					obj.confirmFun(obj.fmt);
				}
			} else {
				console.error("type error");
			}
		}, function(e) {

		}, {
			title: "请选择日期",
			date: dDate,
			minDate: minDate,
			maxDate: maxDate
		});

	});
}